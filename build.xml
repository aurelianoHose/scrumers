<project name="scrumers"
         default="compile"
         xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">

    <property environment="env" />
    <property name="HOSTNAME" value="${env.COMPUTERNAME}" />
    <property file="build_${env.COMPUTERNAME}.properties" />

    <property name="src" value="src" />
    <property name="web" value="web" />
    <property name="build" value=".build" />
    <property name="classes" value="${build}/WEB-INF/classes" />
    <property name="dist" value=".dist" />
    <property name="tools" value="tools" />
    <property name="reports" value=".reports" />
    <property name="sql" value="sql" />
    <property name="lib" value="${web}/WEB-INF/lib" />

    
    <path id="deployer.classpath">
        <fileset dir="${tools}/tomcat_deployer">
            <include name="*.jar" />
        </fileset>
    </path>
    
    <!-- Configure the custom Ant tasks for the Manager application -->
    <taskdef resource="org/apache/catalina/ant/catalina.tasks" classpathref="deployer.classpath" />

    
    <path id="tools.path">
        <fileset dir="tools">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="lib.path">
        <fileset dir="${build}/WEB-INF/lib">
            <include name="**/*.jar" />
        </fileset>
        <pathelement location="${tools}/cobertura-2.1.1.jar" />
        <pathelement location="${tomcat.dir}/lib/servlet-api.jar"/>
        <pathelement location="${tools}/junit-4.11.jar" />
        <pathelement location="${tools}/hamcrest-core-1.3.jar" />
    </path>

    <path id="classpath">
        <fileset dir="${lib}">
            <include name="**/*.jar" />
            <include name="**/*.zip" />
        </fileset>

        <fileset dir="${tools}">
            <include name="**/*.jar" />
        </fileset>

        <pathelement location="${tomcat.dir}/lib/servlet-api.jar" />
        <pathelement location="${tools}/junit-4.11.jar" />
        <pathelement location="${tools}/hamcrest-core-1.3.jar" />
    </path>

    <taskdef classpathref="tools.path" resource="tasks.properties" />

    <taskdef resource="checkstyletask.properties"
             classpath="tools/checkstyle-6.1.1-all.jar" />

    <!-- ===== init ===== -->
    <target name="init">
        <mkdir dir="${build}" />

        <native2ascii encoding="windows-1251" src="${web}/WEB-INF/classes" dest="${build}/WEB-INF/classes" includes="**/*.cp1251" ext=".properties" />

        <copy todir="${build}" filtering="true">
            <fileset dir="${web}">
                <include name="**/*.properties" />
                <include name="**/*.tag" />
                <include name="**/*.xml" />
            </fileset>
            <filterset begintoken="@{" endtoken="}" onmissingfiltersfile="warn">
                <filtersfile file="build.properties" />
                <filtersfile file="build_${HOSTNAME}.properties" />
            </filterset>
        </copy>

        <copy todir="${build}" filtering="false">
            <fileset dir="${web}">
                <exclude name="**/*.properties" />
                <exclude name="**/*.cp1251" />
                <exclude name="**/*.tag" />
            </fileset>
        </copy>
    </target>

    <!-- ===== compile ===== -->
    <target name="compile" depends="init">
        <javac srcdir="${src}" destdir="${build}/WEB-INF/classes" debug="true" deprecation="true" optimize="true" source="1.7" target="1.7" encoding="UTF-8" fork="true" includeantruntime="false" classpathref="classpath">
            <classpath refid="lib.path" />
            <exclude name="**/junit4/*.*"/>
        </javac>
    </target>

    <!-- ===== cobertura-instrument ====== -->

    <target name="cobertura-instrument" description="Create the instrumented classes used by cobertura">
        <cobertura-instrument todir="${build}/WEB-INF/classes">
            <fileset dir="${classes}">
                <include name="**/*.class"/>
                <exclude name="**/*Suite.class"/>
                <exclude name="**/*JUnit4.class"/>
                <exclude name="**/*Dao.class"/>
                <exclude name="**/*Mapper.class"/>
                <exclude name="**/*Service.class"/>
                <exclude name="**/*$*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <!-- ===== cobertura-report ====== -->

    <target name="cobertura-report" depends="tests">
      <cobertura-report format="html" destdir="${reports}/coverage-report">
          <fileset dir="${src}">
              <include name="**/*.java" />
              <exclude name="**/*Dao.java"/>
          </fileset>
      </cobertura-report>
    </target>

    <!-- ===== war ===== -->
    <target name="war" depends="compile">
        <mkdir dir="${dist}" />
        <war warfile="${dist}/${ant.project.name}.war" basedir="${build}" />
    </target>

    <!-- ===== clean ===== -->
    <target name="clean">
        <delete file="cobertura.ser"/>
        <delete file="junit*.properties" failonerror="true"/>
        <delete dir="${reports}" failonerror="true"/>
        <delete dir="${dist}" failonerror="true" />
        <delete dir="${build}" failonerror="true" />
    </target>

    <!-- ===== checkstyle ===== -->
    <target name="checkstyle">
        <mkdir dir="${reports}" />

        <checkstyle config="conf/sun_checks.xml" failOnViolation="false">
            <fileset dir="${src}" includes="**/*.java" />
            <formatter type="plain" />
            <formatter type="xml" toFile="${reports}/checkstyle_errors.xml" />
        </checkstyle>

        <xslt style="conf/checkstyle.xsl"
              in="${reports}/checkstyle_errors.xml"
              out="${reports}/checkstyle_errors.html" />
    </target>

    <target name="pmd">
        <mkdir dir="${reports}" />

        <taskdef name="pmd"
                 classname="net.sourceforge.pmd.ant.PMDTask"
                 classpathref="tools.path" />

        <pmd shortFilenames="true">
            <ruleset>rulesets/favorites.xml</ruleset>
            <ruleset>basic</ruleset>
            <formatter type="html"
                       toFile="${reports}/pmd_report.html"
                       linkPrefix="http://pmd.sourceforge.net/xref/" />

            <fileset dir="${src}">
                <include name="**/*.java" />
            </fileset>
        </pmd>
    </target>

    <!-- ==== SQL === -->
    <target name="db-configure">
        <mkdir dir="${build}/sql" />

        <copy todir="${build}/sql" filtering="true">
            <fileset dir="${sql}">
                <include name="**/*.sql" />
            </fileset>
            <filterset begintoken="@{" endtoken="}" onmissingfiltersfile="warn">
                <filtersfile file="build.properties" />
                <filtersfile file="build_${HOSTNAME}.properties" />
            </filterset>
        </copy>
    </target>

    <target name="db-create">
        <sql userid="${db.admin}" password="${db.admin.passwd}" url="${db.url}/" driver="${jdbc.driverClassName}" classpathref="classpath" autocommit="on">
            DROP DATABASE IF EXISTS ${db.name};

            DROP ROLE IF EXISTS ${db.owner};

            CREATE ROLE ${db.owner} LOGIN
              PASSWORD '${db.passwd}'
              SUPERUSER INHERIT CREATEDB CREATEROLE REPLICATION;

            CREATE DATABASE ${db.name}
              WITH OWNER = ${db.owner}
                   ENCODING = 'UTF8'
                   TABLESPACE = pg_default
                   LC_COLLATE = 'Russian_Russia.1251'
                   LC_CTYPE = 'Russian_Russia.1251'
                   CONNECTION LIMIT = -1;
        </sql>
    </target>

    <target name="db-init-tables" depends="db-configure">
         <sql userid="${db.owner}" password="${db.passwd}" url="${db.url}/${db.name}" driver="${jdbc.driverClassName}" classpathref="classpath">
             <path>
                 <sort>
                     <fileset dir="${build}/sql/tables">
                         <include name="**/*.sql" />
                     </fileset>
                 </sort>
             </path>
         </sql>
    </target>


    <target name="db-init" depends="db-init-tables, db-configure">
        <sql userid="${db.owner}" password="${db.passwd}" url="${db.url}/${db.name}" driver="${jdbc.driverClassName}" classpathref="classpath">
            <path>
                <sort>
                    <fileset dir="${build}/sql/data">
                        <include name="**/*.sql" />
                    </fileset>
                </sort>
            </path>
        </sql>
    </target>

    <target name="db-init-test" depends="db-init-tables, db-configure">
        <sql userid="${db.owner}" password="${db.passwd}" url="${db.url}/${db.name}" driver="${jdbc.driverClassName}" classpathref="classpath">
            <path>
                <sort>
                    <fileset dir="${build}/sql/test_data">
                        <include name="**/*.sql" />
                    </fileset>
                </sort>
            </path>
        </sql>
    </target>

    <!-- ==== Junit4 === -->
    <target name="compile-tests" depends="compile">
        <javac srcdir="${src}" destdir="${build}/WEB-INF/classes" debug="true" deprecation="true" optimize="true" source="1.7" target="1.7" encoding="UTF-8" fork="true" includeantruntime="false" classpathref="classpath">
            <classpath refid="lib.path" />
            <classpath location="${tools}/spring-test-3.2.12.RELEASE.jar"/>
            <include name="**/junit4/*.*"/>
        </javac>
    </target>

    <target name="tests" depends="clean, compile-tests, cobertura-instrument" >
        <mkdir dir="${reports}" />

        <junit forkmode="perBatch" printsummary="yes" haltonfailure="yes" haltonerror="yes" fork="yes">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
            <classpath refid="classpath" />
            <classpath location="${build}"/>
            <classpath location="${build}/web" />
            <classpath location="${build}/WEB-INF/classes" />
            <classpath location="${build}/cobertura_instruments" />

            <jvmarg line="-Dcatalina.base=${build}"/>

            <formatter type="plain" usefile="false" />
            <formatter type="xml" />

            <batchtest fork="yes" todir="${reports}">
                <fileset dir="${build}/WEB-INF/classes" includes="**/*Suite.class" />
            </batchtest>
        </junit>
    </target>

    
    <!-- ==== Deployer target ==== -->
    <target name="tomcat-deploy" description="Deploy web application">
        <deploy url="${url}" username="${username}" password="${password}" path="${path}" war="${dist}/${ant.project.name}.war" update="true" />
    </target>

    <target name="tomcat-undeploy" description="Undeploy web application">
        <undeploy url="${url}" username="${username}" password="${password}" path="${path}" />
    </target>
</project>
