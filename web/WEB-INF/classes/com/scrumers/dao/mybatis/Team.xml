<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Team">

    <resultMap id="teamMap" type="Team">
        <id property="id" column="id" />
        <result property="name" column="name"/>
        <result property="idCreator" column="user_id"/>
        <result property="added" column="added"/>
        <result property="modified" column="modified"/>
        <result property="del" column="del"/>
        <result property="numOfUsers" column="numOfUsers"/>
        <result property="teamRole" column="teamRole"/>
        <result property="scrumMaster" column="scrumMaster"/>
        <result property="scrumMasterId" column="scrumMasterId"/>
    </resultMap>

    <insert id="create">
        <selectKey order="BEFORE" keyProperty="id" resultType="long" statementType="PREPARED">
            SELECT nextval('team_id_seq')
        </selectKey>
        INSERT INTO team (id, name, user_id, added) VALUES (#{id}, #{name}, #{idCreator}, now())
    </insert>

    <insert id="createWithId">
        INSERT INTO team (id, name, user_id, added) VALUES (#{id}, #{name}, #{idCreator}, now())
    </insert>

    <select id="read" resultMap="teamMap">
        SELECT id, name, user_id, added, modified, del  FROM team WHERE id = #{id}
    </select>

    <select id="readTeamRole" resultType="java.lang.String">
        SELECT rt.name
        FROM roles_team rt JOIN users_team ut ON rt.id = ut.role_id
        WHERE ut.team_id = #{tid} AND ut.user_id = #{uid}
    </select>

    <select id="selectId" resultType="java.lang.Long">
        SELECT nextval('team_id_seq')
    </select>

    <select id="readByName" resultMap="teamMap">
        SELECT id, name, user_id, added, modified, del
        FROM team
        WHERE name LIKE #{name}
    </select>

    <select id="readByUserId" resultMap="teamMap">
        SELECT t.id, t.name, ut.role_id AS teamRole, (SELECT COUNT(*) FROM users_team WHERE team_id=ut.team_id) AS numOfUsers, t.user_id, t.added, t.modified, t.del
        FROM team t INNER JOIN users_team ut ON t.id = ut.team_id
        WHERE ut.user_id = #{uid} AND t.del = false
    </select>

    <select id="readByUserIdAndOrganizationId" resultMap="teamMap">
        SELECT t.id, t.name, ut.role_id AS teamRole, (SELECT COUNT(*) FROM users_team WHERE team_id=ut.team_id) AS numOfUsers, t.user_id, t.added, t.modified, t.del,
            (SELECT us.fname||' '||us.sname FROM users us
                INNER JOIN users_team utt ON us.id = utt.user_id
                WHERE utt.team_id = t.id AND utt.role_id = 1) AS scrumMaster, 
            (SELECT us.id FROM users us
                INNER JOIN users_team utt ON us.id = utt.user_id
                WHERE utt.team_id = t.id AND utt.role_id = 1) AS scrumMasterId
        FROM team t INNER JOIN users_team ut ON t.id = ut.team_id
                    INNER JOIN organization_team ot ON ot.team_id = ut.team_id
                    INNER JOIN users u On u.id=ut.user_id 
        WHERE ut.user_id = #{uid} AND ot.organization_id=#{oid} AND t.del = false
    </select>

    <select id="readByProductId" resultMap="teamMap">
        SELECT DISTINCT  t.id, t.name, (SELECT COUNT(*) FROM users_team WHERE team_id=t.id) AS numOfUsers, t.user_id, t.added, t.modified, t.del, u.fname || ' ' || u.sname AS scrumMaster, u.id AS scrumMasterId
        FROM team_product tp INNER JOIN team t ON t.id = tp.team_id
            INNER JOIN users_team ut ON ut.team_id = t.id
            INNER JOIN users u On u.id=ut.user_id 
        WHERE tp.product_id = #{pid} AND t.del = false AND ut.role_id = 1 

        UNION

        SELECT DISTINCT  t.id, t.name, (SELECT COUNT(*) FROM users_team WHERE team_id=t.id) AS numOfUsers, t.user_id, t.added, t.modified, t.del, NULL AS scrumMaster, 0 AS scrumMasterId
        FROM team_product tp INNER JOIN team t ON t.id = tp.team_id
        WHERE tp.product_id = #{pid} AND t.del = false AND t.id not in (
            SELECT DISTINCT  t.id
            FROM team_product tp INNER JOIN team t ON t.id = tp.team_id
                    INNER JOIN users_team ut ON ut.team_id = t.id
                    INNER JOIN users u On u.id=ut.user_id 
            WHERE tp.product_id = #{pid} AND t.del = false AND ut.role_id = 1 
        )
    </select>

    <select id="readAll" resultMap="teamMap">
        SELECT id, name, (SELECT COUNT(*) FROM users_team WHERE team_id=id) AS numOfUsers, user_id, added, modified, del  FROM team
    </select>

    <update id="update">
        UPDATE team
        SET name = #{name}, user_id = #{idCreator}, modified = now(), del=#{del}
        WHERE id = #{id}
    </update>

    <delete id="delete">
        UPDATE team
        SET del = 'TRUE'
        WHERE id = #{id}
    </delete>

    <delete id="deleteFromUsersTeamByTeamId">
        DELETE FROM users_team WHERE team_id = #{tid} 
    </delete>

    <delete id="deleteFromUsersTeam">
        DELETE FROM users_team WHERE user_id = #{uid} AND team_id=#{tid}
    </delete>

    <delete id="deleteFromTeamProductByTeamIdAndProductId">
        DELETE FROM team_product WHERE team_id = #{tid} AND product_id = #{pid}
    </delete>

    <delete id="deleteFromTeamProductByTeamId">
        DELETE FROM team_product WHERE team_id = #{tid}
    </delete>

    <delete id="deleteFromTeamProductByProductId">
        DELETE FROM team_product WHERE product_id = #{pid}
    </delete>

    <delete id="deleteMemberFromTeam">
        DELETE FROM users_team WHERE user_id = #{uid} AND team_id = #{tid}
    </delete> 

    <insert id="addUserToATeam">
        INSERT INTO users_team (user_id, team_id, role_id) VALUES (#{uid}, #{tid}, #{rid})
    </insert>

    <insert id="addProductToATeam">
        INSERT INTO team_product (team_id, product_id) VALUES (#{tid}, #{pid})
    </insert>

    <update id="updateMemberRole">
        UPDATE users_team SET role_id = #{rid} WHERE user_id = #{uid} AND team_id = #{tid}
    </update>

    <update id="updateIdCreator">
        UPDATE team SET user_id = #{uid} WHERE id = #{tid}
    </update>
</mapper>
